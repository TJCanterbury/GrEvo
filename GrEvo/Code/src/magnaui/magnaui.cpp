// generated by Fast Light User Interface Designer (fluid) version 1.0303

#include "magnaui.h"

void MagnaUI::cb_load_graph1_btn_i(Fl_Button*, void*) {
  char *flstr = fl_file_chooser("Select Network 1","*",".",0);
if (flstr!=NULL) {
load_graph1_disp->value(flstr);
sim->graph_file_name1 = trimwhitespace(strdup(load_graph1_disp->value()));
};
}
void MagnaUI::cb_load_graph1_btn(Fl_Button* o, void* v) {
  ((MagnaUI*)(o->parent()->parent()->user_data()))->cb_load_graph1_btn_i(o,v);
}

void MagnaUI::cb_load_graph1_disp_i(Fl_Input*, void*) {
  sim->graph_file_name1 = trimwhitespace(strdup(load_graph1_disp->value()));
}
void MagnaUI::cb_load_graph1_disp(Fl_Input* o, void* v) {
  ((MagnaUI*)(o->parent()->parent()->user_data()))->cb_load_graph1_disp_i(o,v);
}

void MagnaUI::cb_load_graph2_btn_i(Fl_Button*, void*) {
  char *flstr = fl_file_chooser("Select Network 2","*",".",0);
if (flstr!=NULL) {
load_graph2_disp->value(flstr);
sim->graph_file_name2 = trimwhitespace(strdup(load_graph2_disp->value()));
};
}
void MagnaUI::cb_load_graph2_btn(Fl_Button* o, void* v) {
  ((MagnaUI*)(o->parent()->parent()->user_data()))->cb_load_graph2_btn_i(o,v);
}

void MagnaUI::cb_load_graph2_disp_i(Fl_Input*, void*) {
  sim->graph_file_name2 = trimwhitespace(strdup(load_graph2_disp->value()));
}
void MagnaUI::cb_load_graph2_disp(Fl_Input* o, void* v) {
  ((MagnaUI*)(o->parent()->parent()->user_data()))->cb_load_graph2_disp_i(o,v);
}

void MagnaUI::cb_output_dir_btn_i(Fl_Button*, void*) {
  char *flstr = fl_dir_chooser("Select directory",".",0);
if (flstr!=NULL) {
output_dir_disp->value(flstr);
sim->output_file_dir = trimwhitespace(strdup(output_dir_disp->value()));
};
}
void MagnaUI::cb_output_dir_btn(Fl_Button* o, void* v) {
  ((MagnaUI*)(o->parent()->parent()->user_data()))->cb_output_dir_btn_i(o,v);
}

void MagnaUI::cb_output_dir_disp_i(Fl_Input*, void*) {
  sim->output_file_dir = trimwhitespace(strdup(output_dir_disp->value()));
}
void MagnaUI::cb_output_dir_disp(Fl_Input* o, void* v) {
  ((MagnaUI*)(o->parent()->parent()->user_data()))->cb_output_dir_disp_i(o,v);
}

void MagnaUI::cb_output_prefix_disp_i(Fl_Input*, void*) {
  sim->output_file_pref = trimwhitespace(strdup(output_prefix_disp->value()));
}
void MagnaUI::cb_output_prefix_disp(Fl_Input* o, void* v) {
  ((MagnaUI*)(o->parent()->parent()->user_data()))->cb_output_prefix_disp_i(o,v);
}

void MagnaUI::cb_edge_s3_i(Fl_Light_Button*, void*) {
  sim->edge_optimizing_measure_code = 2;
}
void MagnaUI::cb_edge_s3(Fl_Light_Button* o, void* v) {
  ((MagnaUI*)(o->parent()->parent()->parent()->user_data()))->cb_edge_s3_i(o,v);
}

void MagnaUI::cb_edge_ec_i(Fl_Light_Button*, void*) {
  sim->edge_optimizing_measure_code = 0;
}
void MagnaUI::cb_edge_ec(Fl_Light_Button* o, void* v) {
  ((MagnaUI*)(o->parent()->parent()->parent()->user_data()))->cb_edge_ec_i(o,v);
}

void MagnaUI::cb_edge_ics_i(Fl_Light_Button*, void*) {
  sim->edge_optimizing_measure_code = 1;
}
void MagnaUI::cb_edge_ics(Fl_Light_Button* o, void* v) {
  ((MagnaUI*)(o->parent()->parent()->parent()->user_data()))->cb_edge_ics_i(o,v);
}

void MagnaUI::cb_node_none_i(Fl_Light_Button*, void*) {
  sim->use_nodematrix = 0;
node_m_disp->value("");
sim->nodematrix_file = NULL;
}
void MagnaUI::cb_node_none(Fl_Light_Button* o, void* v) {
  ((MagnaUI*)(o->parent()->parent()->parent()->user_data()))->cb_node_none_i(o,v);
}

void MagnaUI::cb_node_m_i(Fl_Lighter_Button*, void*) {
  char *flstr = fl_file_chooser("Select node comparison matrix","*",".",0);
if (flstr!=NULL) {
node_m_disp->value(flstr);
sim->nodematrix_file = trimwhitespace(strdup(node_m_disp->value()));
}
sim->use_nodematrix = 1;
}
void MagnaUI::cb_node_m(Fl_Lighter_Button* o, void* v) {
  ((MagnaUI*)(o->parent()->parent()->parent()->user_data()))->cb_node_m_i(o,v);
}

void MagnaUI::cb_node_m_disp_i(Fl_Input*, void*) {
  node_m->setonly();
sim->use_nodematrix = 1;
sim->nodematrix_file = trimwhitespace(strdup(node_m_disp->value()));
}
void MagnaUI::cb_node_m_disp(Fl_Input* o, void* v) {
  ((MagnaUI*)(o->parent()->parent()->parent()->user_data()))->cb_node_m_disp_i(o,v);
}

void MagnaUI::cb_alpha_disp_i(Fl_Float_Input*, void*) {
  sim->alpha = atof(alpha_disp->value());
}
void MagnaUI::cb_alpha_disp(Fl_Float_Input* o, void* v) {
  ((MagnaUI*)(o->parent()->parent()->user_data()))->cb_alpha_disp_i(o,v);
}

void MagnaUI::cb_init_pop_none_i(Fl_Light_Button*, void*) {
  init_pop_file_disp->value("");
sim->init_pop_file = NULL;
}
void MagnaUI::cb_init_pop_none(Fl_Light_Button* o, void* v) {
  ((MagnaUI*)(o->parent()->parent()->parent()->user_data()))->cb_init_pop_none_i(o,v);
}

void MagnaUI::cb_init_pop_file_i(Fl_Lighter_Button*, void*) {
  char *flstr = fl_file_chooser("Select initial population file","*",".",0);
if (flstr!=NULL) {
init_pop_file_disp->value(flstr);
sim->init_pop_file = trimwhitespace(strdup(init_pop_file_disp->value()));
};
}
void MagnaUI::cb_init_pop_file(Fl_Lighter_Button* o, void* v) {
  ((MagnaUI*)(o->parent()->parent()->parent()->user_data()))->cb_init_pop_file_i(o,v);
}

void MagnaUI::cb_init_pop_file_disp_i(Fl_Input*, void*) {
  init_pop_file->setonly();
sim->init_pop_file = trimwhitespace(strdup(init_pop_file_disp->value()));
}
void MagnaUI::cb_init_pop_file_disp(Fl_Input* o, void* v) {
  ((MagnaUI*)(o->parent()->parent()->parent()->user_data()))->cb_init_pop_file_disp_i(o,v);
}

void MagnaUI::cb_pop_size_disp_i(Fl_Int_Input*, void*) {
  sim->pop_size = atoi(pop_size_disp->value());
}
void MagnaUI::cb_pop_size_disp(Fl_Int_Input* o, void* v) {
  ((MagnaUI*)(o->parent()->parent()->parent()->user_data()))->cb_pop_size_disp_i(o,v);
}

void MagnaUI::cb_num_gens_disp_i(Fl_Int_Input*, void*) {
  sim->n_gen = atoi(num_gens_disp->value());
}
void MagnaUI::cb_num_gens_disp(Fl_Int_Input* o, void* v) {
  ((MagnaUI*)(o->parent()->parent()->parent()->user_data()))->cb_num_gens_disp_i(o,v);
}

void MagnaUI::cb_frac_elite_disp_i(Fl_Float_Input*, void*) {
  sim->pop_elite_ratio = atof(frac_elite_disp->value());
}
void MagnaUI::cb_frac_elite_disp(Fl_Float_Input* o, void* v) {
  ((MagnaUI*)(o->parent()->parent()->parent()->user_data()))->cb_frac_elite_disp_i(o,v);
}

void MagnaUI::cb_n_threads_disp_i(Fl_Int_Input*, void*) {
  sim->n_threads = atoi(n_threads_disp->value());
}
void MagnaUI::cb_n_threads_disp(Fl_Int_Input* o, void* v) {
  ((MagnaUI*)(o->parent()->parent()->parent()->user_data()))->cb_n_threads_disp_i(o,v);
}

void MagnaUI::cb_freq_output_disp_i(Fl_Int_Input*, void*) {
  sim->freq = atoi(freq_output_disp->value());
}
void MagnaUI::cb_freq_output_disp(Fl_Int_Input* o, void* v) {
  ((MagnaUI*)(o->parent()->parent()->parent()->user_data()))->cb_freq_output_disp_i(o,v);
}

void MagnaUI::cb_stop_sim_btn_i(Fl_Button*, void*) {
  pthread_cancel(run_sim_thread);
main_window->label("MAGNA++");
main_window->activate();
}
void MagnaUI::cb_stop_sim_btn(Fl_Button* o, void* v) {
  ((MagnaUI*)(o->parent()->user_data()))->cb_stop_sim_btn_i(o,v);
}

MagnaUI::MagnaUI() {
   {
  } sim = new magnaparams;
  { main_window = new Fl_Double_Window(644, 613, "MAGNA++");
    main_window->user_data((void*)(this));
    { Fl_Group* o = new Fl_Group(5, 20, 635, 147, "Required");
      o->box(FL_ENGRAVED_BOX);
      o->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
      { load_graph1_btn = new Fl_Button(12, 34, 158, 23, "Network 1");
        load_graph1_btn->callback((Fl_Callback*)cb_load_graph1_btn);
      } // Fl_Button* load_graph1_btn
      { load_graph1_disp = new Fl_Input(175, 33, 460, 24);
        load_graph1_disp->tooltip("Network with fewer nodes.");
        load_graph1_disp->callback((Fl_Callback*)cb_load_graph1_disp);
        sim->graph_file_name1 = trimwhitespace(strdup(load_graph1_disp->value()));
      } // Fl_Input* load_graph1_disp
      { load_graph2_btn = new Fl_Button(12, 68, 158, 23, "Network 2");
        load_graph2_btn->callback((Fl_Callback*)cb_load_graph2_btn);
      } // Fl_Button* load_graph2_btn
      { load_graph2_disp = new Fl_Input(175, 67, 460, 24);
        load_graph2_disp->tooltip("Network with more nodes.");
        load_graph2_disp->callback((Fl_Callback*)cb_load_graph2_disp);
        sim->graph_file_name2 = trimwhitespace(strdup(load_graph2_disp->value()));
      } // Fl_Input* load_graph2_disp
      { output_dir_btn = new Fl_Button(12, 103, 158, 23, "Output File Directory");
        output_dir_btn->callback((Fl_Callback*)cb_output_dir_btn);
      } // Fl_Button* output_dir_btn
      { output_dir_disp = new Fl_Input(175, 101, 460, 24);
        output_dir_disp->tooltip("Directory where alignment results will be stored.");
        output_dir_disp->callback((Fl_Callback*)cb_output_dir_disp);
        sim->output_file_dir = trimwhitespace(strdup(output_dir_disp->value()));
      } // Fl_Input* output_dir_disp
      { output_prefix_disp = new Fl_Input(175, 135, 460, 24, "Output File Name");
        output_prefix_disp->tooltip("Prefix of output file names.");
        output_prefix_disp->callback((Fl_Callback*)cb_output_prefix_disp);
        sim->output_file_pref = trimwhitespace(strdup(output_prefix_disp->value()));
        sim->output_file_prefix = NULL;
      } // Fl_Input* output_prefix_disp
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(5, 189, 635, 166, "Optional");
      o->box(FL_ENGRAVED_BOX);
      o->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
      { edge_group = new Fl_Group(10, 214, 625, 38, "Measure of Edge Conservation");
        edge_group->box(FL_EMBOSSED_BOX);
        edge_group->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        { edge_s3 = new Fl_Light_Button(16, 221, 45, 24, "S3");
          edge_s3->type(102);
          edge_s3->callback((Fl_Callback*)cb_edge_s3);
          edge_s3->set();
          sim->edge_optimizing_measure_code = 2;
        } // Fl_Light_Button* edge_s3
        { edge_ec = new Fl_Light_Button(69, 221, 45, 24, "EC");
          edge_ec->type(102);
          edge_ec->callback((Fl_Callback*)cb_edge_ec);
        } // Fl_Light_Button* edge_ec
        { edge_ics = new Fl_Light_Button(122, 221, 45, 24, "ICS");
          edge_ics->type(102);
          edge_ics->callback((Fl_Callback*)cb_edge_ics);
        } // Fl_Light_Button* edge_ics
        edge_group->end();
      } // Fl_Group* edge_group
      { node_group = new Fl_Group(10, 276, 625, 42, "Measure of Node Conservation");
        node_group->box(FL_EMBOSSED_BOX);
        node_group->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        { node_none = new Fl_Light_Button(18, 283, 56, 26, "None");
          node_none->type(102);
          node_none->callback((Fl_Callback*)cb_node_none);
          node_none->set();
          sim->use_nodematrix = 0;
          sim->nodematrix_file = NULL;
        } // Fl_Light_Button* node_none
        { node_m = new Fl_Lighter_Button(79, 283, 180, 26, "Node Similarity File");
          node_m->type(102);
          node_m->box(FL_UP_BOX);
          node_m->color(FL_BACKGROUND_COLOR);
          node_m->selection_color(FL_YELLOW);
          node_m->labeltype(FL_NORMAL_LABEL);
          node_m->labelfont(0);
          node_m->labelsize(14);
          node_m->labelcolor(FL_FOREGROUND_COLOR);
          node_m->callback((Fl_Callback*)cb_node_m);
          node_m->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          node_m->when(FL_WHEN_RELEASE);
        } // Fl_Lighter_Button* node_m
        { node_m_disp = new Fl_Input(264, 283, 366, 27);
          node_m_disp->tooltip("To optimize node conservation, include file with pairwise node similarities.");
          node_m_disp->callback((Fl_Callback*)cb_node_m_disp);
        } // Fl_Input* node_m_disp
        node_group->end();
      } // Fl_Group* node_group
      { alpha_disp = new Fl_Float_Input(11, 324, 66, 24, "Edge-Node Weight");
        alpha_disp->tooltip("Contribution of edge vs. node conservation. 1 = edge conservation only. 0 = n\
ode conservation only.");
        alpha_disp->type(1);
        alpha_disp->callback((Fl_Callback*)cb_alpha_disp);
        alpha_disp->align(Fl_Align(FL_ALIGN_RIGHT));
        alpha_disp->value("0.5");
        sim->alpha = 0.5;
      } // Fl_Float_Input* alpha_disp
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(5, 378, 635, 190, "Advanced (see manual)");
      o->box(FL_ENGRAVED_BOX);
      o->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
      { init_pop_group = new Fl_Group(11, 400, 625, 41, "Initial Population File");
        init_pop_group->box(FL_EMBOSSED_BOX);
        init_pop_group->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        { init_pop_none = new Fl_Light_Button(16, 410, 62, 24, "None");
          init_pop_none->type(102);
          init_pop_none->callback((Fl_Callback*)cb_init_pop_none);
          init_pop_none->set();
          sim->init_pop_file = NULL;
        } // Fl_Light_Button* init_pop_none
        { init_pop_file = new Fl_Lighter_Button(81, 410, 70, 24, "File");
          init_pop_file->type(102);
          init_pop_file->box(FL_UP_BOX);
          init_pop_file->color(FL_BACKGROUND_COLOR);
          init_pop_file->selection_color(FL_YELLOW);
          init_pop_file->labeltype(FL_NORMAL_LABEL);
          init_pop_file->labelfont(0);
          init_pop_file->labelsize(14);
          init_pop_file->labelcolor(FL_FOREGROUND_COLOR);
          init_pop_file->callback((Fl_Callback*)cb_init_pop_file);
          init_pop_file->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          init_pop_file->when(FL_WHEN_RELEASE);
        } // Fl_Lighter_Button* init_pop_file
        { init_pop_file_disp = new Fl_Input(156, 410, 475, 25);
          init_pop_file_disp->tooltip("To customize initial population, select file containing the list of alignment\
s to be included.");
          init_pop_file_disp->callback((Fl_Callback*)cb_init_pop_file_disp);
        } // Fl_Input* init_pop_file_disp
        init_pop_group->end();
      } // Fl_Group* init_pop_group
      { Fl_Group* o = new Fl_Group(12, 466, 308, 92, "Genetic Algorithm Options");
        o->box(FL_EMBOSSED_BOX);
        o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        { pop_size_disp = new Fl_Int_Input(252, 474, 63, 22, "Population Size");
          pop_size_disp->tooltip("The larger the value, the better. 15,000 is recommended. If the process takes\
 too long, try decreasing this value.");
          pop_size_disp->type(2);
          pop_size_disp->callback((Fl_Callback*)cb_pop_size_disp);
          pop_size_disp->value("15000");
          sim->pop_size = 15000;
        } // Fl_Int_Input* pop_size_disp
        { num_gens_disp = new Fl_Int_Input(252, 502, 63, 22, "Number of Generations");
          num_gens_disp->tooltip("The larger the value, the better. 2,000 is recommended. If the process takes \
too long, try decreasing this value.");
          num_gens_disp->type(2);
          num_gens_disp->callback((Fl_Callback*)cb_num_gens_disp);
          num_gens_disp->value("2000");
          sim->n_gen = 2000;
        } // Fl_Int_Input* num_gens_disp
        { frac_elite_disp = new Fl_Float_Input(252, 529, 63, 22, "Fraction of Elite Members");
          frac_elite_disp->tooltip("Fraction of the population that survives from one generation to the next. 0.5\
 is recommended.");
          frac_elite_disp->type(1);
          frac_elite_disp->callback((Fl_Callback*)cb_frac_elite_disp);
          frac_elite_disp->value("0.5");
          sim->pop_elite_ratio = 0.5;
        } // Fl_Float_Input* frac_elite_disp
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(325, 466, 308, 35, "Parallelization Options");
        o->box(FL_EMBOSSED_BOX);
        o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        { n_threads_disp = new Fl_Int_Input(330, 472, 61, 24, "Number of Threads");
          n_threads_disp->tooltip("Automatically set to maximum possible value. Decreasing this value will slow \
down computation.");
          n_threads_disp->type(2);
          n_threads_disp->callback((Fl_Callback*)cb_n_threads_disp);
          n_threads_disp->align(Fl_Align(FL_ALIGN_RIGHT));
          char nthr_str[8]; int nthr = numprocs(); if (nthr < 1) nthr = 1; sprintf(nthr_str,"%d",nthr); n_threads_disp->value(nthr_str);
          sim->n_threads = nthr;
        } // Fl_Int_Input* n_threads_disp
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(325, 522, 308, 35, "Output Options");
        o->box(FL_EMBOSSED_BOX);
        o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        { freq_output_disp = new Fl_Int_Input(330, 528, 61, 24, "Frequency of Output");
          freq_output_disp->tooltip("0 = only output final alignment. Set to k to output best alignment every n/k \
generations.");
          freq_output_disp->type(2);
          freq_output_disp->callback((Fl_Callback*)cb_freq_output_disp);
          freq_output_disp->align(Fl_Align(FL_ALIGN_RIGHT));
          freq_output_disp->value("0");
          sim->freq = 0;
        } // Fl_Int_Input* freq_output_disp
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Group* o
    { run_sim_btn = new Fl_Button(5, 577, 265, 29, "Run MAGNA++");
      run_sim_btn->callback((Fl_Callback*)run_sim_btn_cb);
    } // Fl_Button* run_sim_btn
    { stop_sim_btn = new Fl_Button(374, 577, 265, 29, "Stop MAGNA++");
      stop_sim_btn->callback((Fl_Callback*)cb_stop_sim_btn);
      if(ISWIN32) stop_sim_btn->hide();
      stop_sim_btn->hide();
    } // Fl_Button* stop_sim_btn
    main_window->size_range(560, 530);
    main_window->end();
    main_window->resizable(main_window);
  } // Fl_Double_Window* main_window
}

void MagnaUI::show(int argc, char **argv) {
  main_window->show(argc, argv);
}

void MagnaUI::run_sim_btn_cb(Fl_Button* o, void* v) {
  ((MagnaUI*)(o->parent()->user_data()))->run_sim_btn_cb_i(o,v);
}

void MagnaUI::run_sim_btn_cb_i(Fl_Button*, void*) {
  #define run_sim_btn_cb_i_fn
  #include "magnauifluidadd.h"
  #undef run_sim_btn_cb_i_fn
}
